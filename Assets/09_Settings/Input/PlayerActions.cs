//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/09_Settings/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""BaseActionMap"",
            ""id"": ""eb5db5b0-b634-4fcb-a2db-f6154ab3186f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f72edc9e-9ba7-4036-80a9-04680cd56e70"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1f5af99b-6e69-4451-93dc-a232d7e112a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldingJump"",
                    ""type"": ""Button"",
                    ""id"": ""50d77e2d-ada9-4a91-bbbb-3196b05cd83a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""04d99161-daf5-413b-a70c-d1b4331c7200"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldingSlowMoLaunch"",
                    ""type"": ""Button"",
                    ""id"": ""fe566efc-7520-4c41-a00c-a29bc57859aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""0aeb10ae-e9aa-4a25-bca1-45dd25e5e26a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftJoystickDirection"",
                    ""type"": ""Button"",
                    ""id"": ""1dec1064-360b-4b9c-a088-1eed13fa8b54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""daed61c3-c1db-4938-96ee-062b2d743b70"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bdea1da0-d6be-4da0-b59c-fc1ce05e47aa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3a9ae2b6-c5e1-4173-a24b-fef4b220ecb3"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d4f7334b-9a04-424c-bf83-d416fe86831d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""67e4d22b-37b7-4850-927e-4b490b769e89"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""473ac7de-8c51-4307-8294-713e324b010b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee2c1040-3d4e-47da-87e7-63bb5ff2b390"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fda3dd3-2308-4e36-9566-10f617642916"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""HoldingJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""998b722d-aca6-4def-9dfc-a468b555f714"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HoldingJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ceffa58-d082-410b-8a89-3e9da6bdbab1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9c17a37-7716-4749-9f1f-e0b0fa827baa"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb4d6389-6ab6-464e-9331-ec95c7debcbd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""HoldingSlowMoLaunch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90ec41b4-db15-46de-9e99-7732ab4afd8c"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HoldingSlowMoLaunch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4d8d592-f70e-4c1a-95d1-72e6c81ad527"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HoldingSlowMoLaunch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""793b42f0-2447-4668-977c-9ce9c0af82ba"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HoldingSlowMoLaunch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40d85ff8-af59-4b7f-95f7-9af0dc48da60"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HoldingSlowMoLaunch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65d0191a-3a08-4cb0-85b3-05496f0acf41"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2622877a-749b-4530-943d-196fc6178723"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftJoystickDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""33ee728f-d7f1-4549-8bbf-1ad0787d4f33"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftJoystickDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""93e5a031-1e76-422d-8ca6-96f5882d33a8"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftJoystickDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""eed7c853-2413-4e6e-a49b-2b2e2da4c570"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftJoystickDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""478e4e96-af4c-4665-8562-c57ff2b857c8"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftJoystickDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard + Mouse"",
            ""bindingGroup"": ""Keyboard + Mouse"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // BaseActionMap
        m_BaseActionMap = asset.FindActionMap("BaseActionMap", throwIfNotFound: true);
        m_BaseActionMap_Movement = m_BaseActionMap.FindAction("Movement", throwIfNotFound: true);
        m_BaseActionMap_Jump = m_BaseActionMap.FindAction("Jump", throwIfNotFound: true);
        m_BaseActionMap_HoldingJump = m_BaseActionMap.FindAction("HoldingJump", throwIfNotFound: true);
        m_BaseActionMap_Dash = m_BaseActionMap.FindAction("Dash", throwIfNotFound: true);
        m_BaseActionMap_HoldingSlowMoLaunch = m_BaseActionMap.FindAction("HoldingSlowMoLaunch", throwIfNotFound: true);
        m_BaseActionMap_MousePosition = m_BaseActionMap.FindAction("MousePosition", throwIfNotFound: true);
        m_BaseActionMap_LeftJoystickDirection = m_BaseActionMap.FindAction("LeftJoystickDirection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseActionMap
    private readonly InputActionMap m_BaseActionMap;
    private IBaseActionMapActions m_BaseActionMapActionsCallbackInterface;
    private readonly InputAction m_BaseActionMap_Movement;
    private readonly InputAction m_BaseActionMap_Jump;
    private readonly InputAction m_BaseActionMap_HoldingJump;
    private readonly InputAction m_BaseActionMap_Dash;
    private readonly InputAction m_BaseActionMap_HoldingSlowMoLaunch;
    private readonly InputAction m_BaseActionMap_MousePosition;
    private readonly InputAction m_BaseActionMap_LeftJoystickDirection;
    public struct BaseActionMapActions
    {
        private @PlayerActions m_Wrapper;
        public BaseActionMapActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_BaseActionMap_Movement;
        public InputAction @Jump => m_Wrapper.m_BaseActionMap_Jump;
        public InputAction @HoldingJump => m_Wrapper.m_BaseActionMap_HoldingJump;
        public InputAction @Dash => m_Wrapper.m_BaseActionMap_Dash;
        public InputAction @HoldingSlowMoLaunch => m_Wrapper.m_BaseActionMap_HoldingSlowMoLaunch;
        public InputAction @MousePosition => m_Wrapper.m_BaseActionMap_MousePosition;
        public InputAction @LeftJoystickDirection => m_Wrapper.m_BaseActionMap_LeftJoystickDirection;
        public InputActionMap Get() { return m_Wrapper.m_BaseActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IBaseActionMapActions instance)
        {
            if (m_Wrapper.m_BaseActionMapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnJump;
                @HoldingJump.started -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnHoldingJump;
                @HoldingJump.performed -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnHoldingJump;
                @HoldingJump.canceled -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnHoldingJump;
                @Dash.started -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnDash;
                @HoldingSlowMoLaunch.started -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnHoldingSlowMoLaunch;
                @HoldingSlowMoLaunch.performed -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnHoldingSlowMoLaunch;
                @HoldingSlowMoLaunch.canceled -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnHoldingSlowMoLaunch;
                @MousePosition.started -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnMousePosition;
                @LeftJoystickDirection.started -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnLeftJoystickDirection;
                @LeftJoystickDirection.performed -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnLeftJoystickDirection;
                @LeftJoystickDirection.canceled -= m_Wrapper.m_BaseActionMapActionsCallbackInterface.OnLeftJoystickDirection;
            }
            m_Wrapper.m_BaseActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @HoldingJump.started += instance.OnHoldingJump;
                @HoldingJump.performed += instance.OnHoldingJump;
                @HoldingJump.canceled += instance.OnHoldingJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @HoldingSlowMoLaunch.started += instance.OnHoldingSlowMoLaunch;
                @HoldingSlowMoLaunch.performed += instance.OnHoldingSlowMoLaunch;
                @HoldingSlowMoLaunch.canceled += instance.OnHoldingSlowMoLaunch;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @LeftJoystickDirection.started += instance.OnLeftJoystickDirection;
                @LeftJoystickDirection.performed += instance.OnLeftJoystickDirection;
                @LeftJoystickDirection.canceled += instance.OnLeftJoystickDirection;
            }
        }
    }
    public BaseActionMapActions @BaseActionMap => new BaseActionMapActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard + Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IBaseActionMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnHoldingJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnHoldingSlowMoLaunch(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnLeftJoystickDirection(InputAction.CallbackContext context);
    }
}
